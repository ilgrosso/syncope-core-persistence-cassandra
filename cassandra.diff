diff --git a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java
index de0fcbec18..54ab82018d 100644
--- a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java
+++ b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyTypeClassLogic.java
@@ -102,7 +102,7 @@ public class AnyTypeClassLogic extends AbstractTransactionalLogic<AnyTypeClassTO
         }
 
         AnyTypeClassTO deleted = binder.getAnyTypeClassTO(anyTypeClass);
-        anyTypeClassDAO.delete(key);
+        anyTypeClassDAO.delete(anyTypeClass);
         return deleted;
     }
 
diff --git a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java
index 02a5b25705..11df156557 100644
--- a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java
+++ b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/CommandLogic.java
@@ -62,7 +62,8 @@ public class CommandLogic extends AbstractLogic<EntityTO> {
     @PreAuthorize("hasRole('" + IdRepoEntitlement.IMPLEMENTATION_LIST + "')")
     @Transactional(readOnly = true)
     public Pair<Integer, List<CommandTO>> search(final int page, final int size, final String keyword) {
-        List<Implementation> result = implementationDAO.findByTypeAndKeyword(IdRepoImplementationType.COMMAND, keyword);
+        List<? extends Implementation> result =
+                implementationDAO.findByTypeAndKeyword(IdRepoImplementationType.COMMAND, keyword);
 
         int count = result.size();
 
diff --git a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java
index 52410edd51..131b2f9636 100644
--- a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java
+++ b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java
@@ -411,14 +411,14 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupCR, GroupUR> {
 
         Implementation jobDelegate = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().
                 filter(impl -> GroupMemberProvisionTaskJobDelegate.class.getName().equals(impl.getBody())).
+                map(Implementation.class::cast).
                 findFirst().orElseGet(() -> {
                     Implementation groupMemberProvision = entityFactory.newEntity(Implementation.class);
                     groupMemberProvision.setKey(GroupMemberProvisionTaskJobDelegate.class.getSimpleName());
                     groupMemberProvision.setEngine(ImplementationEngine.JAVA);
                     groupMemberProvision.setType(IdRepoImplementationType.TASKJOB_DELEGATE);
                     groupMemberProvision.setBody(GroupMemberProvisionTaskJobDelegate.class.getName());
-                    groupMemberProvision = implementationDAO.save(groupMemberProvision);
-                    return groupMemberProvision;
+                    return implementationDAO.save(groupMemberProvision);
                 });
 
         SchedTask task = entityFactory.newEntity(SchedTask.class);
diff --git a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java
index 70c86bfb3c..03fc5aed83 100644
--- a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java
+++ b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java
@@ -20,6 +20,7 @@ package org.apache.syncope.core.logic;
 
 import java.lang.reflect.Method;
 import java.util.List;
+import java.util.Optional;
 import java.util.stream.Collectors;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.commons.lang3.StringUtils;
@@ -145,12 +146,8 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati
 
     @PreAuthorize("hasRole('" + IdRepoEntitlement.IMPLEMENTATION_UPDATE + "')")
     public ImplementationTO update(final ImplementationTO implementationTO) {
-        Implementation implementation = implementationDAO.find(implementationTO.getKey());
-        if (implementation == null) {
-            LOG.error("Could not find implementation '" + implementationTO.getKey() + '\'');
-
-            throw new NotFoundException(implementationTO.getKey());
-        }
+        Implementation implementation = Optional.ofNullable(implementationDAO.find(implementationTO.getKey())).
+                orElseThrow(() -> new NotFoundException("Could not find implementation " + implementationTO.getKey()));
 
         checkType(implementationTO.getType());
 
@@ -162,12 +159,8 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati
 
     @PreAuthorize("hasRole('" + IdRepoEntitlement.IMPLEMENTATION_DELETE + "')")
     public void delete(final String type, final String key) {
-        Implementation implementation = implementationDAO.find(key);
-        if (implementation == null) {
-            LOG.error("Could not find implementation '" + key + '\'');
-
-            throw new NotFoundException(key);
-        }
+        Implementation implementation = Optional.ofNullable(implementationDAO.find(key)).
+                orElseThrow(() -> new NotFoundException("Could not find implementation " + key));
 
         if (!implementation.getType().equals(type)) {
             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);
@@ -250,7 +243,7 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati
             throw sce;
         }
 
-        implementationDAO.delete(key);
+        implementationDAO.delete(implementation);
     }
 
     @Override
diff --git a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java
index 531b7e9ff4..8ad4b1f360 100644
--- a/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java
+++ b/core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SchemaLogic.java
@@ -43,6 +43,7 @@ import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;
 import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;
 import org.apache.syncope.core.persistence.api.entity.DerSchema;
 import org.apache.syncope.core.persistence.api.entity.PlainSchema;
+import org.apache.syncope.core.persistence.api.entity.Schema;
 import org.apache.syncope.core.persistence.api.entity.VirSchema;
 import org.apache.syncope.core.provisioning.api.data.SchemaDataBinder;
 import org.springframework.security.access.prepost.PreAuthorize;
@@ -74,24 +75,24 @@ public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {
         this.binder = binder;
     }
 
-    protected boolean doesSchemaExist(final SchemaType schemaType, final String name) {
-        boolean found;
+    protected Schema findSchema(final SchemaType schemaType, final String name) {
+        Schema found;
 
         switch (schemaType) {
             case VIRTUAL:
-                found = virSchemaDAO.find(name) != null;
+                found = virSchemaDAO.find(name);
                 break;
 
             case DERIVED:
-                found = derSchemaDAO.find(name) != null;
+                found = derSchemaDAO.find(name);
                 break;
 
             case PLAIN:
-                found = plainSchemaDAO.find(name) != null;
+                found = plainSchemaDAO.find(name);
                 break;
 
             default:
-                found = false;
+                found = null;
         }
 
         return found;
@@ -106,7 +107,7 @@ public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {
             throw sce;
         }
 
-        if (doesSchemaExist(schemaType, schemaTO.getKey())) {
+        if (findSchema(schemaType, schemaTO.getKey()) != null) {
             throw new DuplicateException(schemaType + "/" + schemaTO.getKey());
         }
 
@@ -129,22 +130,21 @@ public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {
 
     @PreAuthorize("hasRole('" + IdRepoEntitlement.SCHEMA_DELETE + "')")
     public void delete(final SchemaType schemaType, final String schemaKey) {
-        if (!doesSchemaExist(schemaType, schemaKey)) {
-            throw new NotFoundException(schemaType + "/" + schemaKey);
-        }
+        Schema schema = Optional.ofNullable(findSchema(schemaType, schemaKey)).
+                orElseThrow(() -> new NotFoundException(schemaType + "/" + schemaKey));
 
         switch (schemaType) {
             case VIRTUAL:
-                virSchemaDAO.delete(schemaKey);
+                virSchemaDAO.delete((VirSchema) schema);
                 break;
 
             case DERIVED:
-                derSchemaDAO.delete(schemaKey);
+                derSchemaDAO.delete((DerSchema) schema);
                 break;
 
             case PLAIN:
             default:
-                plainSchemaDAO.delete(schemaKey);
+                plainSchemaDAO.delete((PlainSchema) schema);
         }
     }
 
@@ -171,30 +171,48 @@ public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {
         List<T> result;
         switch (schemaType) {
             case VIRTUAL:
-                result = (classes.isEmpty()
-                        ? Optional.ofNullable(keyword).
-                                map(k -> virSchemaDAO.findByKeyword(k)).
-                                orElseGet(() -> virSchemaDAO.findAll())
-                        : virSchemaDAO.findByAnyTypeClasses(classes)).stream().
+                List<? extends VirSchema> virSchemas;
+                if (classes.isEmpty()) {
+                    if (keyword == null) {
+                        virSchemas = virSchemaDAO.findByKeyword(keyword);
+                    } else {
+                        virSchemas = virSchemaDAO.findAll();
+                    }
+                } else {
+                    virSchemas = virSchemaDAO.findByAnyTypeClasses(classes);
+                }
+                result = virSchemas.stream().
                         map(schema -> (T) binder.getVirSchemaTO(schema.getKey())).collect(Collectors.toList());
                 break;
 
             case DERIVED:
-                result = (classes.isEmpty()
-                        ? Optional.ofNullable(keyword).
-                                map(k -> derSchemaDAO.findByKeyword(k)).
-                                orElseGet(() -> derSchemaDAO.findAll())
-                        : derSchemaDAO.findByAnyTypeClasses(classes)).stream().
+                List<? extends DerSchema> derSchemas;
+                if (classes.isEmpty()) {
+                    if (keyword == null) {
+                        derSchemas = derSchemaDAO.findByKeyword(keyword);
+                    } else {
+                        derSchemas = derSchemaDAO.findAll();
+                    }
+                } else {
+                    derSchemas = derSchemaDAO.findByAnyTypeClasses(classes);
+                }
+                result = derSchemas.stream().
                         map(schema -> (T) binder.getDerSchemaTO(schema.getKey())).collect(Collectors.toList());
                 break;
 
             case PLAIN:
             default:
-                result = (classes.isEmpty()
-                        ? Optional.ofNullable(keyword).
-                                map(k -> plainSchemaDAO.findByKeyword(k)).
-                                orElseGet(() -> plainSchemaDAO.findAll())
-                        : plainSchemaDAO.findByAnyTypeClasses(classes)).stream().
+                List<? extends PlainSchema> plainSchemas;
+                if (classes.isEmpty()) {
+                    if (keyword == null) {
+                        plainSchemas = plainSchemaDAO.findByKeyword(keyword);
+                    } else {
+                        plainSchemas = plainSchemaDAO.findAll();
+                    }
+                } else {
+                    plainSchemas = plainSchemaDAO.findByAnyTypeClasses(classes);
+                }
+                result = plainSchemas.stream().
                         map(schema -> (T) binder.getPlainSchemaTO(schema.getKey())).collect(Collectors.toList());
         }
 
@@ -224,31 +242,21 @@ public class SchemaLogic extends AbstractTransactionalLogic<SchemaTO> {
 
     @PreAuthorize("hasRole('" + IdRepoEntitlement.SCHEMA_UPDATE + "')")
     public <T extends SchemaTO> void update(final SchemaType schemaType, final T schemaTO) {
-        if (!doesSchemaExist(schemaType, schemaTO.getKey())) {
-            throw new NotFoundException(schemaType + "/" + schemaTO.getKey());
-        }
+        Schema schema = Optional.ofNullable(findSchema(schemaType, schemaTO.getKey())).
+                orElseThrow(() -> new NotFoundException(schemaType + "/" + schemaTO.getKey()));
 
         switch (schemaType) {
             case VIRTUAL:
-                VirSchema virSchema = Optional.ofNullable(virSchemaDAO.find(schemaTO.getKey())).
-                        orElseThrow(() -> new NotFoundException("Virtual Schema '" + schemaTO.getKey() + '\''));
-
-                binder.update((VirSchemaTO) schemaTO, virSchema);
+                binder.update((VirSchemaTO) schemaTO, (VirSchema) schema);
                 break;
 
             case DERIVED:
-                DerSchema derSchema = Optional.ofNullable(derSchemaDAO.find(schemaTO.getKey())).
-                        orElseThrow(() -> new NotFoundException("Derived Schema '" + schemaTO.getKey() + '\''));
-
-                binder.update((DerSchemaTO) schemaTO, derSchema);
+                binder.update((DerSchemaTO) schemaTO, (DerSchema) schema);
                 break;
 
             case PLAIN:
             default:
-                PlainSchema plainSchema = Optional.ofNullable(plainSchemaDAO.find(schemaTO.getKey())).
-                        orElseThrow(() -> new NotFoundException("Plain Schema '" + schemaTO.getKey() + '\''));
-
-                binder.update((PlainSchemaTO) schemaTO, plainSchema);
+                binder.update((PlainSchemaTO) schemaTO, (PlainSchema) schema);
         }
     }
 
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeClassDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeClassDAO.java
index 3b57b01852..4cbbe32e8a 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeClassDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeClassDAO.java
@@ -25,9 +25,9 @@ public interface AnyTypeClassDAO extends DAO<AnyTypeClass> {
 
     AnyTypeClass find(String key);
 
-    List<AnyTypeClass> findAll();
+    List<? extends AnyTypeClass> findAll();
 
-    AnyTypeClass save(AnyTypeClass anyType);
+    AnyTypeClass save(AnyTypeClass anyTypeClass);
 
-    void delete(String key);
+    void delete(AnyTypeClass anyTypeClass);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java
index 1c07bcee71..6ed83dddb8 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyTypeDAO.java
@@ -30,11 +30,11 @@ public interface AnyTypeDAO extends DAO<AnyType> {
 
     AnyType findGroup();
 
-    List<AnyType> findByTypeClass(AnyTypeClass anyTypeClass);
+    List<? extends AnyType> findByTypeClass(AnyTypeClass anyTypeClass);
 
-    List<AnyType> findAll();
+    List<? extends AnyType> findAll();
 
     AnyType save(AnyType anyType);
 
-    void delete(String key);
+    void delete(AnyType anyType);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java
index 9052401e3a..9961c4d093 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DAO.java
@@ -21,8 +21,4 @@ package org.apache.syncope.core.persistence.api.dao;
 import org.apache.syncope.core.persistence.api.entity.Entity;
 
 public interface DAO<E extends Entity> {
-
-    void refresh(E entity);
-
-    void detach(E entity);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java
index 919dffafa1..cb478ac21a 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ImplementationDAO.java
@@ -25,13 +25,13 @@ public interface ImplementationDAO extends DAO<Implementation> {
 
     Implementation find(String key);
 
-    List<Implementation> findByType(String type);
+    List<? extends Implementation> findByType(String type);
 
-    List<Implementation> findByTypeAndKeyword(String type, String keyword);
+    List<? extends Implementation> findByTypeAndKeyword(String type, String keyword);
 
-    List<Implementation> findAll();
+    List<? extends Implementation> findAll();
 
     Implementation save(Implementation implementation);
 
-    void delete(String key);
+    void delete(Implementation implementation);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java
index 1554876052..d4c7fc2295 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PlainSchemaDAO.java
@@ -29,5 +29,5 @@ public interface PlainSchemaDAO extends SchemaDAO<PlainSchema> {
 
     <T extends PlainAttr<?>> boolean hasAttrs(PlainSchema schema, Class<T> reference);
 
-    List<PlainSchema> findByValidator(Implementation validator);
+    List<? extends PlainSchema> findByValidator(Implementation validator);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java
index 0f8a10d4a1..d78f0456ef 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SchemaDAO.java
@@ -27,13 +27,13 @@ public interface SchemaDAO<S extends Schema> extends DAO<S> {
 
     S find(String key);
 
-    List<S> findByAnyTypeClasses(Collection<AnyTypeClass> anyTypeClasses);
+    List<? extends S> findByAnyTypeClasses(Collection<AnyTypeClass> anyTypeClasses);
 
-    List<S> findByKeyword(String keyword);
+    List<? extends S> findByKeyword(String keyword);
 
-    List<S> findAll();
+    List<? extends S> findAll();
 
-    S save(S derSchema);
+    S save(S schema);
 
-    void delete(String key);
+    void delete(S schema);
 }
diff --git a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java
index da13e59c73..c6a6580f85 100644
--- a/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java
+++ b/core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/VirSchemaDAO.java
@@ -26,5 +26,5 @@ public interface VirSchemaDAO extends SchemaDAO<VirSchema> {
 
     List<String> find(ExternalResource resource);
 
-    List<VirSchema> find(String resource, String anyType);
+    List<? extends VirSchema> find(String resource, String anyType);
 }
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java
index bcefd68db7..4b45fcc0c5 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractDAO.java
@@ -43,14 +43,4 @@ public abstract class AbstractDAO<E extends Entity> implements DAO<E> {
                 orElseThrow(() -> new IllegalStateException(
                 "Could not find EntityManager for domain " + AuthContextUtils.getDomain()));
     }
-
-    @Override
-    public void refresh(final E entity) {
-        entityManager().refresh(entity);
-    }
-
-    @Override
-    public void detach(final E entity) {
-        entityManager().detach(entity);
-    }
 }
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java
index 531443decc..cfe88d4958 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java
@@ -96,12 +96,7 @@ public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass> implements Any
     }
 
     @Override
-    public void delete(final String key) {
-        AnyTypeClass anyTypeClass = find(key);
-        if (anyTypeClass == null) {
-            return;
-        }
-
+    public void delete(final AnyTypeClass anyTypeClass) {
         for (PlainSchema schema : plainSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass))) {
             schema.setAnyTypeClass(null);
         }
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java
index 5c8a19907d..a3a25393dc 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java
@@ -77,14 +77,9 @@ public class JPAAnyTypeDAO extends AbstractDAO<AnyType> implements AnyTypeDAO {
     }
 
     @Override
-    public void delete(final String key) {
-        AnyType anyType = find(key);
-        if (anyType == null) {
-            return;
-        }
-
+    public void delete(final AnyType anyType) {
         if (anyType.equals(findUser()) || anyType.equals(findGroup())) {
-            throw new IllegalArgumentException(key + " cannot be deleted");
+            throw new IllegalArgumentException(anyType.getKey() + " cannot be deleted");
         }
 
         remediationDAO.findByAnyType(anyType).forEach(remediation -> {
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java
index 9bd1393e95..a932a618cf 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java
@@ -78,13 +78,8 @@ public class JPADerSchemaDAO extends AbstractDAO<DerSchema> implements DerSchema
     }
 
     @Override
-    public void delete(final String key) {
-        final DerSchema schema = find(key);
-        if (schema == null) {
-            return;
-        }
-
-        resourceDAO.deleteMapping(key);
+    public void delete(final DerSchema schema) {
+        resourceDAO.deleteMapping(schema.getKey());
 
         if (schema.getAnyTypeClass() != null) {
             schema.getAnyTypeClass().getDerSchemas().remove(schema);
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java
index 8b3e955fc7..c0374494a6 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java
@@ -19,6 +19,7 @@
 package org.apache.syncope.core.persistence.jpa.dao;
 
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.stream.Collectors;
@@ -249,7 +250,8 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem
         policyDAO.findByResource(resource).
                 forEach(policy -> policy.getResources().remove(resource));
 
-        virSchemaDAO.find(resource).forEach(virSchemaDAO::delete);
+        virSchemaDAO.find(resource).stream().
+                map(virSchemaDAO::find).filter(Objects::nonNull).forEach(virSchemaDAO::delete);
 
         if (resource.getConnector() != null
                 && resource.getConnector().getResources() != null
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java
index 1b1a69e01a..a5feb6b195 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAImplementationDAO.java
@@ -93,13 +93,8 @@ public class JPAImplementationDAO extends AbstractDAO<Implementation> implements
     }
 
     @Override
-    public void delete(final String key) {
-        Implementation implementation = find(key);
-        if (implementation == null) {
-            return;
-        }
-
+    public void delete(final Implementation implementation) {
         entityManager().remove(implementation);
-        ImplementationManager.purge(key);
+        ImplementationManager.purge(implementation.getKey());
     }
 }
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java
index 6734b99105..dad2c04936 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java
@@ -138,15 +138,10 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain
     }
 
     @Override
-    public void delete(final String key) {
-        PlainSchema schema = find(key);
-        if (schema == null) {
-            return;
-        }
-
+    public void delete(final PlainSchema schema) {
         deleteAttrs(schema);
 
-        resourceDAO.deleteMapping(key);
+        resourceDAO.deleteMapping(schema.getKey());
 
         if (schema.getAnyTypeClass() != null) {
             schema.getAnyTypeClass().getPlainSchemas().remove(schema);
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java
index 8c7a124115..454a318941 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java
@@ -110,13 +110,8 @@ public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchema
     }
 
     @Override
-    public void delete(final String key) {
-        VirSchema schema = find(key);
-        if (schema == null) {
-            return;
-        }
-
-        resourceDAO.deleteMapping(key);
+    public void delete(final VirSchema schema) {
+        resourceDAO.deleteMapping(schema.getKey());
 
         if (schema.getAnyTypeClass() != null) {
             schema.getAnyTypeClass().getVirSchemas().remove(schema);
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java
index 5fb64aa2fc..8bfd528cc2 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTypeClass.java
@@ -23,7 +23,6 @@ import java.util.List;
 import javax.persistence.Cacheable;
 import javax.persistence.Entity;
 import javax.persistence.FetchType;
-import javax.persistence.ManyToMany;
 import javax.persistence.OneToMany;
 import javax.persistence.Table;
 import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;
@@ -40,9 +39,6 @@ public class JPAAnyTypeClass extends AbstractProvidedKeyEntity implements AnyTyp
 
     public static final String TABLE = "AnyTypeClass";
 
-    @ManyToMany(fetch = FetchType.EAGER, mappedBy = "classes")
-    private List<JPAAnyType> types = new ArrayList<>();
-
     @OneToMany(fetch = FetchType.EAGER, mappedBy = "anyTypeClass")
     private List<JPAPlainSchema> plainSchemas = new ArrayList<>();
 
diff --git a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java
index 1fe52f2053..e84c83a1ad 100644
--- a/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java
+++ b/core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/EntityValidationListener.java
@@ -47,7 +47,7 @@ public class EntityValidationListener {
     @PrePersist
     @PreUpdate
     public void validate(final Object object) {
-        final Validator validator = ApplicationContextProvider.getBeanFactory().getBean(Validator.class);
+        Validator validator = ApplicationContextProvider.getBeanFactory().getBean(Validator.class);
         Set<ConstraintViolation<Object>> violations = validator.validate(object);
         if (!violations.isEmpty()) {
             LOG.warn("Bean validation errors found: {}", violations);
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java
index 1da1bc45b7..325ea17246 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/AbstractTest.java
@@ -20,6 +20,7 @@ package org.apache.syncope.core.persistence.jpa;
 
 import javax.persistence.EntityManager;
 import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;
+import org.apache.syncope.core.persistence.api.entity.Entity;
 import org.apache.syncope.core.persistence.api.entity.EntityFactory;
 import org.apache.syncope.core.persistence.api.entity.PlainAttr;
 import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;
@@ -53,6 +54,14 @@ public abstract class AbstractTest {
         return entityManager;
     }
 
+    public void refresh(final Entity entity) {
+        entityManager().refresh(entity);
+    }
+
+    public void detach(final Entity entity) {
+        entityManager().detach(entity);
+    }
+
     protected <T extends PlainAttr<?>> T findPlainAttr(final String key, final Class<T> reference) {
         return reference.cast(entityManager().find(JPAPlainAttrDAO.getEntityReference(reference), key));
     }
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java
index 0c7eacf0b6..a0fd5afb10 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeClassTest.java
@@ -53,7 +53,7 @@ public class AnyTypeClassTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<AnyTypeClass> list = anyTypeClassDAO.findAll();
+        List<? extends AnyTypeClass> list = anyTypeClassDAO.findAll();
         assertFalse(list.isEmpty());
     }
 
@@ -75,7 +75,7 @@ public class AnyTypeClassTest extends AbstractTest {
         AnyTypeClass minimalUser = anyTypeClassDAO.find("minimal user");
         assertNotNull(minimalUser);
 
-        anyTypeClassDAO.delete(minimalUser.getKey());
+        anyTypeClassDAO.delete(minimalUser);
         assertNull(anyTypeClassDAO.find("minimal user"));
     }
 }
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java
index 1605e9c884..b32bfc3bb4 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java
@@ -66,7 +66,7 @@ public class AnyTypeTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<AnyType> list = anyTypeDAO.findAll();
+        List<? extends AnyType> list = anyTypeDAO.findAll();
         assertFalse(list.isEmpty());
     }
 
@@ -110,12 +110,12 @@ public class AnyTypeTest extends AbstractTest {
         AnyType otherType = anyTypeDAO.find("PRINTER");
         assertNotNull(otherType);
 
-        anyTypeDAO.delete(otherType.getKey());
+        anyTypeDAO.delete(otherType);
         assertNull(anyTypeDAO.find("PRINTER"));
     }
 
     @Test
     public void deleteInvalid() {
-        assertThrows(IllegalArgumentException.class, () -> anyTypeDAO.delete(AnyTypeKind.USER.name()));
+        assertThrows(IllegalArgumentException.class, () -> anyTypeDAO.delete(anyTypeDAO.findUser()));
     }
 }
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java
index b060c0a063..dfbd4231f5 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/DerSchemaTest.java
@@ -42,13 +42,13 @@ public class DerSchemaTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<DerSchema> list = derSchemaDAO.findAll();
+        List<? extends DerSchema> list = derSchemaDAO.findAll();
         assertEquals(10, list.size());
     }
 
     @Test
     public void search() {
-        List<DerSchema> schemas = derSchemaDAO.findByKeyword("mderivedd%");
+        List<? extends DerSchema> schemas = derSchemaDAO.findByKeyword("mderivedd%");
         assertEquals(1, schemas.size());
     }
 
@@ -76,7 +76,7 @@ public class DerSchemaTest extends AbstractTest {
         DerSchema cn = derSchemaDAO.find("cn");
         assertNotNull(cn);
 
-        derSchemaDAO.delete(cn.getKey());
+        derSchemaDAO.delete(cn);
 
         DerSchema actual = derSchemaDAO.find("cn");
         assertNull(actual);
@@ -85,7 +85,7 @@ public class DerSchemaTest extends AbstractTest {
         DerSchema rderiveddata = derSchemaDAO.find("rderiveddata");
         assertNotNull(rderiveddata);
 
-        derSchemaDAO.delete(rderiveddata.getKey());
+        derSchemaDAO.delete(rderiveddata);
 
         actual = derSchemaDAO.find("rderiveddata");
         assertNull(actual);
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java
index 1a8d0194dc..a1efc2e04d 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ImplementationTest.java
@@ -41,7 +41,7 @@ public class ImplementationTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<Implementation> implementations = implementationDAO.findAll();
+        List<? extends Implementation> implementations = implementationDAO.findAll();
         assertFalse(implementations.isEmpty());
 
         assertEquals(19, implementations.size());
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java
index 293e5e94d2..c86b66eade 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java
@@ -54,13 +54,13 @@ public class PlainSchemaTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<PlainSchema> schemas = plainSchemaDAO.findAll();
+        List<? extends PlainSchema> schemas = plainSchemaDAO.findAll();
         assertEquals(27, schemas.size());
     }
 
     @Test
     public void search() {
-        List<PlainSchema> schemas = plainSchemaDAO.findByKeyword("fullna%");
+        List<? extends PlainSchema> schemas = plainSchemaDAO.findByKeyword("fullna%");
         assertEquals(1, schemas.size());
         assertEquals(0, schemas.get(0).getLabels().size());
     }
@@ -172,7 +172,7 @@ public class PlainSchemaTest extends AbstractTest {
     public void delete() {
         PlainSchema firstname = plainSchemaDAO.find("firstname");
 
-        plainSchemaDAO.delete(firstname.getKey());
+        plainSchemaDAO.delete(firstname);
 
         PlainSchema actual = plainSchemaDAO.find("firstname");
         assertNull(actual);
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java
index 97ed8059f9..e4d1dba13a 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/VirSchemaTest.java
@@ -50,13 +50,13 @@ public class VirSchemaTest extends AbstractTest {
 
     @Test
     public void findAll() {
-        List<VirSchema> list = virSchemaDAO.findAll();
+        List<? extends VirSchema> list = virSchemaDAO.findAll();
         assertEquals(3, list.size());
     }
 
     @Test
     public void search() {
-        List<VirSchema> schemas = virSchemaDAO.findByKeyword("rvirtuald%");
+        List<? extends VirSchema> schemas = virSchemaDAO.findByKeyword("rvirtuald%");
         assertEquals(1, schemas.size());
     }
 
@@ -87,7 +87,7 @@ public class VirSchemaTest extends AbstractTest {
     public void delete() {
         VirSchema virtualdata = virSchemaDAO.find("virtualdata");
 
-        virSchemaDAO.delete(virtualdata.getKey());
+        virSchemaDAO.delete(virtualdata);
 
         VirSchema actual = virSchemaDAO.find("virtualdata");
         assertNull(actual);
@@ -96,7 +96,7 @@ public class VirSchemaTest extends AbstractTest {
         VirSchema rvirtualdata = virSchemaDAO.find("rvirtualdata");
         assertNotNull(rvirtualdata);
 
-        virSchemaDAO.delete(rvirtualdata.getKey());
+        virSchemaDAO.delete(rvirtualdata);
 
         actual = virSchemaDAO.find("rvirtualdata");
         assertNull(actual);
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java
index b4ccb19d80..9d4325d257 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeClassTest.java
@@ -82,7 +82,7 @@ public class AnyTypeClassTest extends AbstractTest {
         assertTrue(minimalUser.getPlainSchemas().contains(surname));
         int before = minimalUser.getPlainSchemas().size();
 
-        plainSchemaDAO.delete("surname");
+        plainSchemaDAO.delete(surname);
 
         entityManager().flush();
 
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java
index 5efb5d1a46..190622cb35 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnyTypeTest.java
@@ -65,7 +65,7 @@ public class AnyTypeTest extends AbstractTest {
         assertTrue(group.getClasses().contains(other));
         int groupClassesBefore = group.getClasses().size();
 
-        anyTypeClassDAO.delete("other");
+        anyTypeClassDAO.delete(other);
 
         entityManager().flush();
 
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java
index b993a85f61..e8b4e91582 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java
@@ -128,21 +128,21 @@ public class PlainSchemaTest extends AbstractTest {
                 });
 
         // search for user schema fullname
-        PlainSchema schema = plainSchemaDAO.find("fullname");
-        assertNotNull(schema);
+        PlainSchema fullname = plainSchemaDAO.find("fullname");
+        assertNotNull(fullname);
 
         // check for associated mappings
         List<Item> mapItems = getMappingItems("fullname");
         assertFalse(mapItems.isEmpty());
 
         // delete user schema fullname
-        plainSchemaDAO.delete("fullname");
+        plainSchemaDAO.delete(fullname);
 
         entityManager().flush();
 
         // check for schema deletion
-        schema = plainSchemaDAO.find("fullname");
-        assertNull(schema);
+        fullname = plainSchemaDAO.find("fullname");
+        assertNull(fullname);
 
         // check for mappings deletion
         mapItems = getMappingItems("fullname");
@@ -157,24 +157,24 @@ public class PlainSchemaTest extends AbstractTest {
     @Test
     public void deleteSurname() {
         // search for user schema surname
-        PlainSchema schema = plainSchemaDAO.find("surname");
-        assertNotNull(schema);
+        PlainSchema surname = plainSchemaDAO.find("surname");
+        assertNotNull(surname);
 
         // check for associated mappings
         List<Item> mapItems = getMappingItems("surname");
         assertFalse(mapItems.isEmpty());
 
         // check for labels
-        assertEquals(2, schema.getLabels().size());
+        assertEquals(2, surname.getLabels().size());
 
         // delete user schema surname
-        plainSchemaDAO.delete("surname");
+        plainSchemaDAO.delete(surname);
 
         entityManager().flush();
 
         // check for schema deletion
-        schema = plainSchemaDAO.find("surname");
-        assertNull(schema);
+        surname = plainSchemaDAO.find("surname");
+        assertNull(surname);
     }
 
     @Test
@@ -182,7 +182,7 @@ public class PlainSchemaTest extends AbstractTest {
         int pre = resourceDAO.find("resource-db-pull").
                 getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping().getItems().size();
 
-        plainSchemaDAO.delete("firstname");
+        plainSchemaDAO.delete(plainSchemaDAO.find("firstname"));
         assertNull(plainSchemaDAO.find("firstname"));
 
         assertEquals(pre - 1, resourceDAO.find("resource-db-pull").
diff --git a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java
index 8b9dc51a0a..b184b0d898 100644
--- a/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java
+++ b/core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java
@@ -142,8 +142,8 @@ public class ResourceTest extends AbstractTest {
         assertNotNull(actual.getProvisionByAnyType(AnyTypeKind.USER.name()).get().getMapping());
 
         entityManager().flush();
-        resourceDAO.detach(actual);
-        connInstanceDAO.detach(connector);
+        detach(actual);
+        detach(connector);
 
         // assign the new resource to an user
         User user = userDAO.findByUsername("rossini");
@@ -156,7 +156,7 @@ public class ResourceTest extends AbstractTest {
         // retrieve resource
         resource = resourceDAO.find(actual.getKey());
         assertNotNull(resource);
-        resourceDAO.refresh(resource);
+        refresh(resource);
 
         // check connector
         connector = connInstanceDAO.find("88a7a819-dab5-46b4-9b90-0b9769eabdb8");
diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java
index 57b7907afa..2ddd3516eb 100644
--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java
+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java
@@ -135,7 +135,7 @@ public class AnyTypeDataBinderImpl implements AnyTypeDataBinder {
     public AnyTypeTO delete(final AnyType anyType) {
         AnyTypeTO deleted = getAnyTypeTO(anyType);
 
-        anyTypeDAO.delete(anyType.getKey());
+        anyTypeDAO.delete(anyType);
 
         final Set<String> removed = EntitlementsHolder.getInstance().removeFor(deleted.getKey());
 
diff --git a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java
index 4927d4c5a0..ab01d3404f 100644
--- a/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java
+++ b/core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java
@@ -225,7 +225,7 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {
 
                 if (provisionTO.getVirSchemas().isEmpty()) {
                     for (VirSchema schema : virSchemaDAO.find(resource.getKey(), anyType.getKey())) {
-                        virSchemaDAO.delete(schema.getKey());
+                        virSchemaDAO.delete(schema);
                     }
                 } else {
                     for (String schemaName : provisionTO.getVirSchemas()) {
@@ -247,7 +247,7 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {
             Provision provision = itor.next();
             if (resourceTO.getProvision(provision.getAnyType()).isEmpty()) {
                 virSchemaDAO.find(resource.getKey(), provision.getAnyType()).
-                        forEach(schema -> virSchemaDAO.delete(schema.getKey()));
+                        forEach(schema -> virSchemaDAO.delete(schema));
 
                 itor.remove();
             }
diff --git a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ElasticsearchInit.java b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ElasticsearchInit.java
index 2c94572122..97794623b8 100644
--- a/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ElasticsearchInit.java
+++ b/fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/ElasticsearchInit.java
@@ -53,7 +53,8 @@ public class ElasticsearchInit {
         Implementation reindex = implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).
                 stream().
                 filter(impl -> impl.getEngine() == ImplementationEngine.JAVA && ES_REINDEX.equals(impl.getBody())).
-                findAny().
+                map(Implementation.class::cast).
+                findFirst().
                 orElseGet(() -> {
                     Implementation impl = entityFactory.newEntity(Implementation.class);
                     impl.setKey(ES_REINDEX);
